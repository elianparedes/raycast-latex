import { SymbolsDictionary } from "../types";

export const symbols: SymbolsDictionary = {
  "Greek and Hebrew letters": {
    symbols: [
      { name: "Alpha", syntax: "\\alpha" },
      { name: "Beta", syntax: "\\beta" },
      { name: "Gamma", syntax: "\\gamma" },
      { name: "Gamma", syntax: "\\Gamma" },
      { name: "Delta", syntax: "\\delta" },
      { name: "Delta", syntax: "\\Delta" },
      { name: "Epsilon", syntax: "\\epsilon" },
      { name: "Zeta", syntax: "\\zeta" },
      { name: "Eta", syntax: "\\eta" },
      { name: "Theta", syntax: "\\theta" },
      { name: "Iota", syntax: "\\iota" },
      { name: "Kappa", syntax: "\\kappa" },
      { name: "Lambda", syntax: "\\lambda" },
      { name: "Mu", syntax: "\\mu" },
      { name: "Nu", syntax: "\\nu" },
      { name: "Xi", syntax: "\\xi" },
      { name: "Omicron", syntax: "\\omicron" },
      { name: "Pi", syntax: "\\pi" },
      { name: "Rho", syntax: "\\rho" },
      { name: "Sigma", syntax: "\\sigma" },
      { name: "Tau", syntax: "\\tau" },
      { name: "Upsilon", syntax: "\\upsilon" },
      { name: "Phi", syntax: "\\phi" },
      { name: "Chi", syntax: "\\chi" },
      { name: "Psi", syntax: "\\psi" },
      { name: "Omega", syntax: "\\omega" },
      { name: "aleph", syntax: "\\aleph" },
      { name: "beth", syntax: "\\beth" },
      { name: "gimel", syntax: "\\gimel" },
      { name: "daleth", syntax: "\\daleth" },
    ],
  },
  "Captial Greek and Hebrew letters": {
    symbols: [
      { name: "Alpha", syntax: "A" },
      { name: "Beta", syntax: "B" },
      { name: "Gamma", syntax: "\\Gamma" },
      { name: "Delta", syntax: "\\Delta" },
      { name: "Epsilon", syntax: "E" },
      { name: "Zeta", syntax: "Z" },
      { name: "Eta", syntax: "H" },
      { name: "Theta", syntax: "\\Theta" },
      { name: "Iota", syntax: "I" },
      { name: "Kappa", syntax: "K" },
      { name: "Lambda", syntax: "\\Lambda" },
      { name: "Mu", syntax: "M" },
      { name: "Nu", syntax: "N" },
      { name: "Xi", syntax: "\\Xi" },
      { name: "Omicron", syntax: "O" },
      { name: "Pi", syntax: "\\Pi" },
      { name: "Rho", syntax: "P" },
      { name: "Sigma", syntax: "\\Sigma" },
      { name: "Tau", syntax: "T" },
      { name: "Upsilon", syntax: "\\Upsilon" },
      { name: "Phi", syntax: "\\Phi" },
      { name: "Chi", syntax: "X" },
      { name: "Psi", syntax: "\\Psi" },
      { name: "Omega", syntax: "\\Omega" },
    ],
  },
  Arrows: {
    symbols: [
      { name: "Left Arrow", syntax: "\\leftarrow" },
      { name: "Long Left Arrow", syntax: "\\Leftarrow" },
      { name: "Right Arrow", syntax: "\\rightarrow" },
      { name: "Long Right Arrow", syntax: "\\Rightarrow" },
      { name: "Left Right Arrow", syntax: "\\leftrightarrow" },
      { name: "Harpoons", syntax: "\\rightleftharpoons" },
      { name: "Up Arrow", syntax: "\\uparrow" },
      { name: "Down Arrow", syntax: "\\downarrow" },
      { name: "Up Long Arrow", syntax: "\\Uparrow" },
      { name: "Down Long Arrow", syntax: "\\Downarrow" },
      { name: "Long Left Right Arrow", syntax: "\\Leftrightarrow" },
      { name: "Up Down Long Arrow", syntax: "\\Updownarrow" },
      { name: "Mapsto", syntax: "\\mapsto" },
      { name: "Long Mapsto", syntax: "\\longmapsto" },
      { name: "North East Arrow", syntax: "\\nearrow" },
      { name: "South East Arrow", syntax: "\\searrow" },
      { name: "South West Arrow", syntax: "\\swarrow" },
      { name: "North West Arrow", syntax: "\\nwarrow" },
      { name: "Left Harpoon Up", syntax: "\\leftharpoonup" },
      { name: "Right Harpoon Up", syntax: "\\rightharpoonup" },
      { name: "Left Harpoon Down", syntax: "\\leftharpoondown" },
      { name: "Right Harpoon Down", syntax: "\\rightharpoondown" },
    ],
  },
  Miscellaneous: {
    symbols: [
      { name: "Infinity", syntax: "\\infty" },
      { name: "For all", syntax: "\\forall" },
      { name: "Real part", syntax: "\\Re" },
      { name: "Imaginary part", syntax: "\\Im" },
      { name: "Nabla", syntax: "\\nabla" },
      { name: "Exists", syntax: "\\exists" },
      { name: "Partial derivative", syntax: "\\partial" },
      { name: "Does not exist", syntax: "\\nexists" },
      { name: "Empty set", syntax: "\\emptyset" },
      { name: "Empty set", syntax: "\\varnothing" },
      { name: "Power set", syntax: "\\wp" },
      { name: "Complement", syntax: "\\complement" },
      { name: "Negation", syntax: "\\neg" },
      { name: "Ellipsis", syntax: "\\cdots" },
      { name: "Box", syntax: "\\square" },
      { name: "Tick", syntax: "\\surd" },
      { name: "Black square", syntax: "\\blacksquare" },
      { name: "Triangle", syntax: "\\triangle" },
    ],
  },
  Binary: {
    symbols: [
      { name: "Times", syntax: "\\times" },
      { name: "Dot", syntax: "\\cdot" },
      { name: "Divide", syntax: "\\div" },
      { name: "Intersection", syntax: "\\cap" },
      { name: "Union", syntax: "\\cup" },
      { name: "Not equal", syntax: "\\neq" },
      { name: "Less than or equal", syntax: "\\leq" },
      { name: "Greater than or equal", syntax: "\\geq" },
      { name: "Element of", syntax: "\\in" },
      { name: "Perpendicular", syntax: "\\perp" },
      { name: "Not element of", syntax: "\\notin" },
      { name: "Subset", syntax: "\\subset" },
      { name: "Similar to", syntax: "\\simeq" },
      { name: "Approximately equal", syntax: "\\approx" },
      { name: "Logical And", syntax: "\\wedge" },
      { name: "Logical Or", syntax: "\\vee" },
      { name: "Direct sum", syntax: "\\oplus" },
      { name: "Tensor product", syntax: "\\otimes" },
      { name: "Box", syntax: "\\Box" },
      { name: "Box times", syntax: "\\boxtimes" },
      { name: "Equivalent", syntax: "\\equiv" },
      { name: "Congruent", syntax: "\\cong" },
    ],
  },
  "Math Operators": {
    symbols: [
      { name: "cos", syntax: "\\cos" },
      { name: "csc", syntax: "\\csc" },
      { name: "exp", syntax: "\\exp" },
      { name: "ker", syntax: "\\ker" },
      { name: "limsup", syntax: "\\limsup" },
      { name: "min", syntax: "\\min" },
      { name: "sinh", syntax: "\\sinh" },
      { name: "arcsin", syntax: "\\arcsin", keywords: ["arcsen"] },
      { name: "cosh", syntax: "\\cosh" },
      { name: "deg", syntax: "\\deg" },
      { name: "gcd", syntax: "\\gcd" },
      { name: "lg", syntax: "\\lg" },
      { name: "ln", syntax: "\\ln" },
      { name: "Pr", syntax: "\\Pr" },
      { name: "sup", syntax: "\\sup" },
      { name: "arctan", syntax: "\\arctan" },
      { name: "cot", syntax: "\\cot" },
      { name: "det", syntax: "\\det" },
      { name: "hom", syntax: "\\hom" },
      { name: "lim", syntax: "\\lim" },
      { name: "log", syntax: "\\log" },
      { name: "sec", syntax: "\\sec" },
      { name: "tan", syntax: "\\tan" },
      { name: "arg", syntax: "\\arg" },
      { name: "coth", syntax: "\\coth" },
      { name: "dim", syntax: "\\dim" },
      { name: "liminf", syntax: "\\liminf" },
      { name: "max", syntax: "\\max" },
      { name: "sin", syntax: "\\sin", keywords: ["sen"] },
      { name: "tanh", syntax: "\\tanh" },
    ],
  },
  Delimiters: {
    symbols: [
      { name: "Left Parenthesis", syntax: "(", keywords: ["("] },
      { name: "Right Parenthesis", syntax: ")", keywords: [")"] },
      { name: "Left Bracket", syntax: "[", keywords: ["["] },
      { name: "Right Bracket", syntax: "]", keywords: ["]"] },
      { name: "Left Brace", syntax: "\\{", keywords: ["{"] },
      { name: "Right Brace", syntax: "\\}", keywords: ["}"] },
      { name: "Left Angle Bracket", syntax: "\\langle", keywords: ["<"] },
      { name: "Right Angle Bracket", syntax: "\\rangle", keywords: [">"] },
      { name: "Left Floor", syntax: "\\lfloor" },
      { name: "Right Floor", syntax: "\\rfloor" },
      { name: "Left Ceiling", syntax: "\\lceil" },
      { name: "Right Ceiling", syntax: "\\rceil" },
      { name: "Vertical Line", syntax: "|", keywords: ["|"] },
      { name: "Double Vertical Line", syntax: "\\|", keywords: ["||"] },
      { name: "Backslash", syntax: "\\backslash", keywords: ["\\"] },
      { name: "Left Corner", syntax: "\\ulcorner" },
      { name: "Right Corner", syntax: "\\urcorner" },
      { name: "Lower Left Corner", syntax: "\\llcorner" },
      { name: "Lower Right Corner", syntax: "\\lrcorner" },
    ],
  },
  Matrices: {
    layout: {
      columns: 6,
    },
    symbols: [
      {
        name: "Plain",
        keywords: ["matrix"],
        syntax: `\\begin{matrix}
                1 & 2 \\\\
                a & b
                \\end{matrix}`,
      },
      {
        name: "Parentheses",
        keywords: ["matrix"],
        syntax: `\\begin{pmatrix}
                1 & 2 \\\\
                a & b
                \\end{pmatrix}`,
      },
      {
        name: "Brackets",
        keywords: ["matrix"],
        syntax: `\\begin{bmatrix}
                1 & 2 \\\\
                a & b
                \\end{bmatrix}`,
      },
      {
        name: "Braces",
        keywords: ["matrix"],
        syntax: `\\begin{Bmatrix}
                1 & 2 \\\\
                a & b
                \\end{Bmatrix}`,
      },
      {
        name: "Pipes",
        keywords: ["matrix"],
        syntax: `\\begin{vmatrix}
                1 & 2 \\\\
                a & b
                \\end{vmatrix}`,
      },
      {
        name: "Double pipes",
        keywords: ["matrix"],
        syntax: `\\begin{Vmatrix}
                1 & 2 \\\\
                a & b
                \\end{Vmatrix}`,
      },
    ],
  },
  Integrals: {
    symbols: [
      { name: "Integral", syntax: "\\int" },
      { name: "Double Integral", syntax: "\\iint" },
      { name: "Triple Integral", syntax: "\\iiint" },
    ],
  },
  Fractions: {
    symbols: [{ name: "Fraction", syntax: "\\frac{a}{b}" }],
  },
  Binomials: {
    symbols: [
      {
        name: "Binomial",
        syntax: "\\binom{a}{b}",
      },
      {
        name: "Brackets",
        keywords: ["binomial"],
        syntax: "{n\\brack k}",
      },
    ],
  },
  "Square Roots": {
    symbols: [
      { name: "Square root", syntax: "\\sqrt{a}" },
      { name: "Cubic root", syntax: "\\sqrt[3]{a}" },
      { name: "N root", syntax: "\\sqrt[n]{a}" },
    ],
  },
};
